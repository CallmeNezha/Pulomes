// Generated by CoffeeScript 1.10.0
(function() {
  var animate, camera, ctmLoader, depthMaterial, depthRenderTarget, effectComposer, fragmentShader, gui, initScene, initStats, onWindowResize, orbitControl, pars, planeGeo, planeMat, planeObj, postprocessing, ref, render, renderModeChange, renderPass, renderer, sandMat, scene, spotLight, ssaoPass, stats, vertexShader;

  vertexShader = 'varying vec3 vWorldPosition;\n\nvoid main() {\n\n	vec4 worldPosition = modelMatrix * vec4( position, 1.0 );\n	vWorldPosition = worldPosition.xyz;\n\n	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n}';

  fragmentShader = 'uniform vec3 topColor;\nuniform vec3 bottomColor;\nuniform float offset;\nuniform float exponent;\n\nvarying vec3 vWorldPosition;\n\nvoid main() {\n\n	float h = normalize( vWorldPosition + offset ).y;\n	gl_FragColor = vec4( mix( bottomColor, topColor, max( pow( max( h , 0.0), exponent ), 0.0 ) ), 1.0 );\n\n}';

  initStats = function() {
    var stats;
    stats = new Stats();
    stats.setMode(0);
    return stats;
  };

  initScene = function() {
    var camera, renderer, scene;
    scene = new THREE.Scene();
    camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 5001);
    camera.position.x = 300;
    camera.position.y = 180;
    camera.position.z = 300;
    camera.position.multiplyScalar(1.7);
    camera.lookAt(scene.position);
    renderer = new THREE.WebGLRenderer({
      antialias: true
    });
    renderer.setPixelRatio(window.devicePixelRatio);
    renderer.setClearColor(0x000000);
    renderer.setSize(window.innerWidth, window.innerHeight);
    renderer.shadowMap.enabled = true;
    return {
      scene: scene,
      camera: camera,
      renderer: renderer
    };
  };

  stats = initStats();

  ref = initScene(), scene = ref.scene, camera = ref.camera, renderer = ref.renderer;

  document.getElementById("stats-output").appendChild(stats.domElement);

  document.getElementById('webgl-output').appendChild(renderer.domElement);

  orbitControl = new THREE.OrbitControls(camera, renderer.domElement);

  orbitControl.maxDistance = 1000;

  orbitControl.minDistance = 200;

  orbitControl.minPolarAngle = Math.PI / 4;

  orbitControl.maxPolarAngle = Math.PI / 2;

  orbitControl.center = new THREE.Vector3(0, 150, 0);

  spotLight = new THREE.SpotLight(0xffffff, 1);

  spotLight.position.set(15, 40, 35);

  spotLight.position.multiplyScalar(20);

  spotLight.castShadow = true;

  spotLight.angle = Math.PI / 3;

  spotLight.penumbra = 0.25;

  spotLight.decay = 1;

  spotLight.distance = 2000;

  spotLight.shadow.mapSize.width = 2048 * 2;

  spotLight.shadow.mapSize.height = 2048 * 2;

  spotLight.shadow.camera.near = 1;

  spotLight.shadow.camera.far = 2000;

  scene.add(spotLight);

  sandMat = new THREE.MeshPhongMaterial({
    color: 0xffffff,
    specular: 0x050505
  });

  sandMat.color.setHSL(0.095, 1, 0.75);

  planeGeo = new THREE.CircleGeometry(2000, 16);

  planeMat = sandMat;

  planeObj = new THREE.Mesh(planeGeo, planeMat);

  planeObj.position.set(0, 0, 0);

  planeObj.rotation.x = -Math.PI / 2;

  planeObj.receiveShadow = true;

  scene.add(planeObj);

  ctmLoader = new THREE.CTMLoader();

  ctmLoader.load("../models/mammoth.ctm", function(geometry) {
    var ctmObj, mat;
    mat = new THREE.MeshLambertMaterial({
      color: 0xcac7b0
    });
    ctmObj = new THREE.Mesh(geometry, mat);
    ctmObj.rotation.x = -Math.PI / 2;
    ctmObj.position.set(0, 170, 350);
    ctmObj.castShadow = true;
    scene.add(ctmObj);
    return document.getElementById("loading").style.display = 'none';
  }, {
    useWorker: true
  });

  renderer.gammaInput = true;

  renderer.gammaOutput = true;

  postprocessing = {
    ssao_enabled: true,
    render_mode: 0
  };

  renderPass = new THREE.RenderPass(scene, camera);

  depthMaterial = new THREE.MeshDepthMaterial();

  depthMaterial.depthPacking = THREE.RGBADepthPacking;

  depthMaterial.blending = THREE.NoBlending;

  pars = {
    minFilter: THREE.LinearFilter,
    magFilter: THREE.LinearFilter
  };

  depthRenderTarget = new THREE.WebGLRenderTarget(window.innerWidth, window.innerHeight, pars);

  ssaoPass = new THREE.ShaderPass(THREE.SSAOShader);

  ssaoPass.renderToScreen = true;

  ssaoPass.uniforms["tDepth"].value = depthRenderTarget.texture;

  ssaoPass.uniforms['size'].value.set(window.innerWidth, window.innerHeight);

  ssaoPass.uniforms['cameraNear'].value = camera.near;

  ssaoPass.uniforms['cameraFar'].value = camera.far;

  ssaoPass.uniforms['onlyAO'].value = postprocessing.renderMode === 1;

  ssaoPass.uniforms['aoClamp'].value = 0.3;

  ssaoPass.uniforms['lumInfluence'].value = 0.5;

  effectComposer = new THREE.EffectComposer(renderer);

  effectComposer.addPass(renderPass);

  effectComposer.addPass(ssaoPass);

  renderModeChange = function(value) {
    switch (value) {
      case '0':
        postprocessing.ssao_enabled = true;
        return ssaoPass.uniforms['onlyAO'].value = false;
      case '1':
        postprocessing.ssao_enabled = false;
        return ssaoPass.uniforms['onlyAO'].value = false;
      case '2':
        postprocessing.ssao_enabled = true;
        return ssaoPass.uniforms['onlyAO'].value = true;
      default:
        return console.error("Not define renderModeChange type: " + value);
    }
  };

  gui = new dat.GUI();

  gui.add(postprocessing, "render_mode", {
    ssao: 0,
    orignal: 1,
    aobuffer: 2
  }).onChange(renderModeChange).listen();

  render = function() {
    if (postprocessing.ssao_enabled === true) {
      scene.overrideMaterial = depthMaterial;
      renderer.render(scene, camera, depthRenderTarget, true);
      scene.overrideMaterial = null;
      return effectComposer.render();
    } else {
      return renderer.render(scene, camera);
    }
  };

  (animate = function() {
    var time;
    requestAnimationFrame(animate);
    time = Date.now();
    orbitControl.update();
    render();
    return stats.update();
  })();


  /*
    Events Listener
   */

  onWindowResize = function() {
    var newHeight, newWidth;
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
    renderer.setSize(window.innerWidth, window.innerHeight);
    ssaoPass.uniforms['size'].value.set(window.innerWidth, window.innerHeight);
    newWidth = Math.floor(window.innerWidth / window.devicePixelRatio) || 1;
    newHeight = Math.floor(window.innerHeight / window.devicePixelRatio) || 1;
    depthRenderTarget.setSize(newWidth, newHeight);
    return effectComposer.setSize(newWidth, newHeight);
  };

  window.addEventListener('resize', onWindowResize, false);

}).call(this);

//# sourceMappingURL=mamoth.js.map
